name: CI/CD Pipeline (Manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      run_security_checks:
        description: 'Run security checks'
        required: false
        default: true
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Test with pytest
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
  security:
    runs-on: ubuntu-latest
    if: ${{ inputs.run_security_checks || true }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: safety check
    
    - name: Run bandit security check
      run: bandit -r . -x ./venv,./tests

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t betterprompt:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 5000:5000 \
          -e AZURE_OPENAI_ENDPOINT="https://test.openai.azure.com" \
          -e AZURE_OPENAI_API_KEY="test-key" \
          betterprompt:latest
        sleep 10
        docker exec test-container curl -f http://localhost:5000/health || exit 1
        docker stop test-container
    
    - name: Log in to Docker Hub (if main branch)
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to Docker Hub (if main branch)
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag betterprompt:latest ${{ secrets.DOCKER_USERNAME }}/betterprompt:latest
        docker tag betterprompt:latest ${{ secrets.DOCKER_USERNAME }}/betterprompt:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/betterprompt:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/betterprompt:${{ github.sha }}
