name: Deploy to Azure Container Instance

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

env:
  AZURE_CONTAINER_GROUP: betterprompt-cg
  AZURE_CONTAINER_NAME: betterprompt
  CONTAINER_IMAGE: betterprompt:latest

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run tests
      env:
        TESTING: true
        AZURE_OPENAI_ENDPOINT: https://test.openai.azure.com
        AZURE_OPENAI_API_KEY: test-key
      run: |
        pytest test_app.py -v
    
    - name: Validate Dockerfile
      run: |
        docker build -t test-image .

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Build and push Docker image to Azure Container Registry
      run: |
        # Build the Docker image
        docker build -t ${{ env.CONTAINER_IMAGE }} .
        
        # Tag for Azure Container Registry
        docker tag ${{ env.CONTAINER_IMAGE }} ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}/${{ env.CONTAINER_IMAGE }}
        
        # Login to Azure Container Registry
        echo ${{ secrets.AZURE_REGISTRY_PASSWORD }} | docker login ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }} -u ${{ secrets.AZURE_REGISTRY_USERNAME }} --password-stdin
        
        # Push to registry
        docker push ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}/${{ env.CONTAINER_IMAGE }}

    - name: Deploy to Azure Container Instance
      run: |
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_CONTAINER_NAME }} \
          --image ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}/${{ env.CONTAINER_IMAGE }} \
          --registry-login-server ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }} \
          --registry-username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
          --registry-password ${{ secrets.AZURE_REGISTRY_PASSWORD }} \
          --dns-name-label ${{ env.AZURE_CONTAINER_NAME }}-${{ github.run_number }} \
          --ports 5000 \
          --environment-variables \
            AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
            AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
            MODEL_NAME=o1-mini \
            MAX_COMPLETION_TOKENS=2048 \
            REQUEST_TIMEOUT=30 \
            FLASK_ENV=production \
          --cpu 1 \
          --memory 2 \
          --restart-policy Always \
          --location ${{ secrets.AZURE_LOCATION }} \
          || az container restart \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_CONTAINER_NAME }}

    - name: Get Container Instance URL
      run: |
        FQDN=$(az container show \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_CONTAINER_NAME }} \
          --query ipAddress.fqdn \
          --output tsv)
        echo "üöÄ Application deployed successfully!"
        echo "üì± Access your app at: http://$FQDN:5000"
        echo "üîç Health check: http://$FQDN:5000/health"

    - name: Verify deployment
      run: |
        sleep 30  # Wait for container to start
        FQDN=$(az container show \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_CONTAINER_NAME }} \
          --query ipAddress.fqdn \
          --output tsv)
        
        # Test health endpoint
        curl -f "http://$FQDN:5000/health" || exit 1
        echo "‚úÖ Health check passed!"

  cleanup-old-containers:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Cleanup old container instances (keep last 3)
      run: |
        # Get all container instances starting with our app name
        OLD_CONTAINERS=$(az container list \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --query "[?starts_with(name, '${{ env.AZURE_CONTAINER_NAME }}-')].name" \
          --output tsv | head -n -3)
        
        # Delete old containers
        for container in $OLD_CONTAINERS; do
          echo "Deleting old container: $container"
          az container delete \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name $container \
            --yes
        done
