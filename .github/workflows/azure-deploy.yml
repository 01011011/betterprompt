name: Deploy to Azure Container Instance

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

permissions:
  id-token: write
  contents: read

env:
  AZURE_CONTAINER_GROUP: betterprompt-cg
  AZURE_CONTAINER_NAME: betterprompt

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run tests
      env:
        TESTING: true
        AZURE_OPENAI_ENDPOINT: https://test.openai.azure.com
        AZURE_OPENAI_API_KEY: test-key
      run: |
        pytest test_app.py -v
    
    - name: Validate Dockerfile
      run: |
        docker build -t test-image .
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Setup deployment variables
      run: |
        # Use existing ACR
        ACR_NAME="betterpromptacr"
        ACR_LOGIN_SERVER="betterpromptacr.azurecr.io"
        CONTAINER_NAME="${{ env.AZURE_CONTAINER_NAME }}-${{ github.run_number }}"
        
        echo "üèóÔ∏è Using existing Azure Container Registry: $ACR_NAME"
        echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
        echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
        echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV
    
    - name: Build and push Docker image
      run: |
        echo "üê≥ Building Docker image for ACR: $ACR_LOGIN_SERVER"
        
        # Login to ACR
        az acr login --name $ACR_NAME
        
        # Build and tag image
        docker build -t $ACR_LOGIN_SERVER/betterprompt:latest .
        
        # Push to ACR
        docker push $ACR_LOGIN_SERVER/betterprompt:latest
        
        echo "‚úÖ Image pushed successfully!"
    
    - name: Create container instance
      run: |
        echo "üöÄ Creating Azure Container Instance: $CONTAINER_NAME"
        
        # Get ACR credentials
        ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query username --output tsv)
        ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query passwords[0].value --output tsv)
        
        # Create container instance from our custom image
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name $CONTAINER_NAME \
          --image $ACR_LOGIN_SERVER/betterprompt:latest \
          --os-type Linux \
          --dns-name-label $CONTAINER_NAME \
          --ports 5000 \
          --protocol TCP \
          --restart-policy OnFailure \
          --cpu 1 \
          --memory 1.5 \
          --registry-login-server $ACR_LOGIN_SERVER \
          --registry-username $ACR_USERNAME \
          --registry-password $ACR_PASSWORD \
          --environment-variables \
            AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
            AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }} \
            FLASK_ENV=production \
            PORT=5000
        
        echo "üéâ Container instance created successfully!"
        
        # Get the FQDN
        FQDN=$(az container show \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name $CONTAINER_NAME \
          --query ipAddress.fqdn \
          --output tsv)
        
        echo "üåê Application URL: http://$FQDN:5000"
        echo "::notice title=Deployment Success::Application deployed to http://$FQDN:5000"

    - name: Health check
      run: |
        CONTAINER_NAME="${{ env.AZURE_CONTAINER_NAME }}-${{ github.run_number }}"
        
        # Get the FQDN
        FQDN=$(az container show \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name $CONTAINER_NAME \
          --query ipAddress.fqdn \
          --output tsv)
        
        echo "üè• Performing health check on http://$FQDN:5000"
        
        # Wait for container to be ready
        sleep 30
        
        # Check if the application is responding
        for i in {1..5}; do
          if curl -f -s "http://$FQDN:5000" > /dev/null; then
            echo "‚úÖ Health check passed!"
            break
          else
            echo "‚è≥ Attempt $i/5: Waiting for application to respond..."
            sleep 15
          fi
        done

    - name: Cleanup old deployments
      run: |
        echo "üßπ Cleaning up old deployments..."
        
        # Get all container instances starting with our app name
        CONTAINERS=$(az container list \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --query "[?starts_with(name, '${{ env.AZURE_CONTAINER_NAME }}-')].name" \
          --output tsv)
        
        # Sort by creation time and keep only the latest 3 deployments
        CURRENT_CONTAINER="${{ env.AZURE_CONTAINER_NAME }}-${{ github.run_number }}"
        
        for container in $CONTAINERS; do
          if [ "$container" != "$CURRENT_CONTAINER" ]; then
            # Extract run number from container name
            RUN_NUM=$(echo "$container" | sed 's/.*-//')
            CURRENT_RUN_NUM="${{ github.run_number }}"
            
            # Delete if more than 3 deployments old
            if [ $((CURRENT_RUN_NUM - RUN_NUM)) -gt 2 ]; then
              echo "üóëÔ∏è Deleting old container: $container"
              az container delete \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
                --name $container \
                --yes
            fi
          fi
        done
        
        echo "‚úÖ Cleanup completed!"
